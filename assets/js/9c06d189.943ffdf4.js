"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[781],{3752:(e,t,n)=>{n.d(t,{A:()=>i});var r=n(6540),a=n(4848);function i(e){let{src:t,options:n={}}=e;const i=(0,r.useRef)(null),[s,o]=(0,r.useState)(!1);return(0,r.useEffect)((()=>{if("undefined"==typeof window)return;const e="asciinema-player-css";if(!document.getElementById(e)){const t=document.createElement("link");t.id=e,t.rel="stylesheet",t.href="https://cdn.jsdelivr.net/npm/@asciinema/player@3.0.0/dist/themes/asciinema-player.css",document.head.appendChild(t)}const r="asciinema-player-script";let a=document.getElementById(r);a||(a=document.createElement("script"),a.id=r,a.src="https://cdn.jsdelivr.net/npm/@asciinema/player@3.0.0/dist/asciinema-player.min.js",a.async=!0,document.body.appendChild(a));const s=()=>{if(!window.AsciinemaPlayer)return void console.error("AsciinemaPlayer not available");const e=t.startsWith("http")?t:`${window.location.origin}${t}`;try{window.AsciinemaPlayer.create(e,i.current,{cols:120,rows:24,autoPlay:!0,fit:"width",...n}),o(!0)}catch(r){console.error("Player initialization failed:",r)}};return window.AsciinemaPlayer?s():a.onload=s,()=>{i.current&&(i.current.innerHTML="")}}),[t,n]),(0,a.jsx)("div",{ref:i,style:{minHeight:"300px",backgroundColor:s?"transparent":"#f5f5f5",borderRadius:"4px",margin:"20px 0",position:"relative"},children:!s&&(0,a.jsx)("div",{style:{position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)",color:"#666"},children:"Loading player..."})})}},5363:(e,t,n)=>{n.d(t,{A:()=>i});n(6540);var r=n(9136),a=n(4848);function i(e){let{children:t,fallback:n}=e;return(0,r.A)()?(0,a.jsx)(a.Fragment,{children:t?.()}):n??null}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var r=n(6540);const a={},i=r.createContext(a);function s(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:t},e.children)}},9653:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>u,frontMatter:()=>l,metadata:()=>r,toc:()=>m});const r=JSON.parse('{"id":"capabilities/examine_data/memory","title":"Working with raw memory","description":"The memory command allows reading or writing raw memory in a debugged program.","source":"@site/docs/capabilities/examine_data/memory.mdx","sourceDirName":"capabilities/examine_data","slug":"/capabilities/examine_data/memory","permalink":"/BugStalker/docs/capabilities/examine_data/memory","draft":false,"unlisted":false,"editUrl":"https://github.com/godzie44/BugStalker/tree/master/website/docs/capabilities/examine_data/memory.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Print variables and arguments","permalink":"/BugStalker/docs/capabilities/examine_data/print"},"next":{"title":"Working with registers","permalink":"/BugStalker/docs/capabilities/examine_data/register"}}');var a=n(4848),i=n(8453),s=n(5363),o=n(3752);const l={sidebar_position:2},d="Working with raw memory",c={},m=[{value:"Usage example",id:"usage-example",level:2}];function p(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"working-with-raw-memory",children:"Working with raw memory"})}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"memory"})," command allows reading or writing raw memory in a debugged program."]}),"\n",(0,a.jsxs)(t.p,{children:["Available commands:\n",(0,a.jsx)(t.code,{children:"memory read <address>"})," - reads an 8-byte block at the specified address in the debuggee\u2019s memory\n",(0,a.jsx)(t.code,{children:"memory write <address> <value>"})," - writes an 8-byte value to the specified address.\nNote: values are written in little-endian byte order (the last byte of value is stored at the first byte of address)."]}),"\n",(0,a.jsx)(t.h2,{id:"usage-example",children:"Usage example"}),"\n",(0,a.jsx)(t.p,{children:"Consider this Rust program:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-rust",children:'fn print_val(val: u32) {\n    println!("val is {val}");\n}\n\nfn main() {\n    let mut some_val = 3;\n    some_val += 1;\n\n    print_val(some_val);\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:"Goal: Instead of printing 4, we'll manipulate a raw memory to force the output 5."}),"\n",(0,a.jsx)(t.p,{children:"Let\u2019s do it:"}),"\n","\n",(0,a.jsx)(s.A,{children:()=>(0,a.jsx)(o.A,{src:"/BugStalker/casts/memory.cast"})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}}}]);